#!/bin/bash
#
# This script provides commands to start, run tests and build the API
usage="$(basename "$0") [-h] {up|up -d|down|test|clean|build} -- program to manage the IST backend API

  ARGUMENTS:
    up      start the API and start Cassandra docker container
    up -d   start the API in a daemon process and start Cassandra docker container
    down    stop the API and Cassandra
    test    run the API unit tests
    clean   delete the generated build files
    build   build the API

  OPTIONS:
    -h      print the usage"

BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
API_PORT=8080
#######################################
# Execute API related commands
# Globals:
#   BASEDIR
# Arguments:
#   The command to run
# Returns:
#   None
#######################################
main() {
  case "$1" in
  'up')
    start_api_env false
    ;;
  'up -d')
    start_api_env true
    ;;
  'down')
    kill_api_env
    ;;
  'test')
    echo '#### Run unit tests'
    "${BASEDIR}/gradlew" test
    ;;
  'clean')
    echo clean
    "${BASEDIR}/gradlew" clean
    rm -rf "${BASEDIR}/out"
    ;;
  'build')
    main clean
    "${BASEDIR}/gradlew" build
    ;;
  '' | -h)
    echo "${usage}"
    ;;
  *)
    echo "Unexpected goal ${1}"
    printf '\n'
    echo "${usage}"
    ;;
  esac
}
#######################################
# Start the API environment : Cassandra and the spring API application
# Globals:
#   None
# Arguments:
#   (boolean) : if the API should be started as a daemon
# Returns:
#   None
#######################################
start_api_env() {
  local is_db_running
  is_db_running=$("${BASEDIR}/../infrastructure/db" is_up)
  echo '#### Start the API environnment'
  if [[ "$is_db_running" == true ]]; then
    echo '## Cassandra is running'
  else
    echo '## Starting Cassandra'
    "${BASEDIR}/../infrastructure/db" up
  fi
  if [[ -n "$(get_api_pid)" ]]; then
    echo '## The API is running'
  else
    if [[ "$1" == true ]]; then
      echo '## Starting the API in the background'
      "${BASEDIR}/gradlew" -p "${BASEDIR}" bootJar
      java -jar -Dspring.profiles.active=dev "$BASEDIR/build/libs/scalar-ist-api-0.1.0.jar" >/dev/null &
      #      Will wait for the API to start under 10s maximum
      local i='0'
      until [[ -n "$(get_api_pid)" ]]; do
        if [[ "${i}" -gt 20 ]]; then
          echo -e '\nThe API could not start under 10 seconds, please check the logs'
          exit 1
        fi
        echo -n '#'
        sleep 0.5
        i=$((i + 1))
      done
      echo -e '\nThe API has started successfuly'
    else
      echo '## Starting the API'
      "${BASEDIR}/gradlew" -p "${BASEDIR}" bootJar
      java -jar -Dspring.profiles.active=dev "$BASEDIR/build/libs/scalar-ist-api-0.1.0.jar"
    fi
  fi
}

#######################################
# Stop the API environment : Vault, Cassandra and the spring API application
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
kill_api_env() {
  echo '#### Stop the API environnment'
  echo '## Stopping Cassandra'
  "${BASEDIR}/../infrastructure/db" down

  local api_pid
  api_pid=$(get_api_pid)
  if [[ -n "${api_pid}" ]]; then
    echo '## Stopping the API'
    kill "$api_pid"
  else
    echo '## The API is stopped'
  fi
}

#######################################
# Get the process PID of the API
# Globals:
#   API_PORT : the port the API is running on
# Arguments:
#   None
# Returns:
#   If the API is running, return the pid otherwise return nothing
#######################################
get_api_pid() {
  pid="$(lsof -Pi :"${API_PORT}" -sTCP:LISTEN -t)"
  echo "${pid}"
}

main "$*"
