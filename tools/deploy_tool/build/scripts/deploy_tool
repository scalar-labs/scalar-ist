#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   deploy_tool start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh deploy_tool
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and DEPLOY_TOOL_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}.." && pwd -P ) || exit

APP_NAME="deploy_tool"
APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and DEPLOY_TOOL_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/lib/deploy_tool.jar:$APP_HOME/lib/scalardl-java-client-sdk-3.5.0.jar:$APP_HOME/lib/org.everit.json.schema-1.12.1.jar:$APP_HOME/lib/hashids-1.0.3.jar:$APP_HOME/lib/scalardl-common-3.5.0.jar:$APP_HOME/lib/scalardb-3.6.0.jar:$APP_HOME/lib/scalardl-rpc-3.5.0.jar:$APP_HOME/lib/guice-5.0.1.jar:$APP_HOME/lib/picocli-4.6.1.jar:$APP_HOME/lib/log4j-slf4j-impl-2.17.1.jar:$APP_HOME/lib/metrics-jmx-4.2.2.jar:$APP_HOME/lib/simpleclient_dropwizard-0.12.0.jar:$APP_HOME/lib/cassandra-driver-core-3.6.0.jar:$APP_HOME/lib/azure-cosmos-4.28.1.jar:$APP_HOME/lib/metrics-core-4.2.2.jar:$APP_HOME/lib/azure-core-1.27.0.jar:$APP_HOME/lib/applicationautoscaling-2.17.69.jar:$APP_HOME/lib/dynamodb-2.17.69.jar:$APP_HOME/lib/aws-json-protocol-2.17.69.jar:$APP_HOME/lib/protocol-core-2.17.69.jar:$APP_HOME/lib/aws-core-2.17.69.jar:$APP_HOME/lib/auth-2.17.69.jar:$APP_HOME/lib/regions-2.17.69.jar:$APP_HOME/lib/sdk-core-2.17.69.jar:$APP_HOME/lib/apache-client-2.17.69.jar:$APP_HOME/lib/netty-nio-client-2.17.69.jar:$APP_HOME/lib/http-client-spi-2.17.69.jar:$APP_HOME/lib/metrics-spi-2.17.69.jar:$APP_HOME/lib/profiles-2.17.69.jar:$APP_HOME/lib/json-utils-2.17.69.jar:$APP_HOME/lib/utils-2.17.69.jar:$APP_HOME/lib/slf4j-api-1.7.33.jar:$APP_HOME/lib/scalardb-rpc-3.6.0.jar:$APP_HOME/lib/grpc-netty-1.46.0.jar:$APP_HOME/lib/grpc-services-1.46.0.jar:$APP_HOME/lib/grpc-protobuf-1.46.0.jar:$APP_HOME/lib/grpc-stub-1.46.0.jar:$APP_HOME/lib/grpc-core-1.46.0.jar:$APP_HOME/lib/grpc-protobuf-lite-1.46.0.jar:$APP_HOME/lib/grpc-api-1.46.0.jar:$APP_HOME/lib/protobuf-java-util-3.19.2.jar:$APP_HOME/lib/guava-31.1-jre.jar:$APP_HOME/lib/javax.json-api-1.1.4.jar:$APP_HOME/lib/javax.json-1.1.4.jar:$APP_HOME/lib/jackson-datatype-jsr310-2.13.3.jar:$APP_HOME/lib/jackson-dataformat-xml-2.13.3.jar:$APP_HOME/lib/jackson-annotations-2.13.3.jar:$APP_HOME/lib/jackson-module-afterburner-2.13.3.jar:$APP_HOME/lib/jackson-core-2.13.3.jar:$APP_HOME/lib/jackson-databind-2.13.3.jar:$APP_HOME/lib/toml4j-0.7.2.jar:$APP_HOME/lib/log4j-core-2.17.1.jar:$APP_HOME/lib/json-20190722.jar:$APP_HOME/lib/commons-validator-1.6.jar:$APP_HOME/lib/handy-uri-templates-2.1.8.jar:$APP_HOME/lib/re2j-1.3.jar:$APP_HOME/lib/javax.inject-1.jar:$APP_HOME/lib/aopalliance-1.0.jar:$APP_HOME/lib/failureaccess-1.0.1.jar:$APP_HOME/lib/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:$APP_HOME/lib/jsr305-3.0.2.jar:$APP_HOME/lib/postgresql-42.3.3.jar:$APP_HOME/lib/checker-qual-3.12.0.jar:$APP_HOME/lib/error_prone_annotations-2.11.0.jar:$APP_HOME/lib/j2objc-annotations-1.3.jar:$APP_HOME/lib/gson-2.8.9.jar:$APP_HOME/lib/log4j-api-2.17.1.jar:$APP_HOME/lib/bcpkix-jdk15on-1.59.jar:$APP_HOME/lib/bcprov-jdk15on-1.59.jar:$APP_HOME/lib/simpleclient_servlet-0.12.0.jar:$APP_HOME/lib/simpleclient_hotspot-0.12.0.jar:$APP_HOME/lib/jetty-servlet-9.4.43.v20210629.jar:$APP_HOME/lib/jooq-3.13.2.jar:$APP_HOME/lib/commons-dbcp2-2.8.0.jar:$APP_HOME/lib/mysql-connector-java-8.0.22.jar:$APP_HOME/lib/mssql-jdbc-8.4.1.jre8.jar:$APP_HOME/lib/commons-digester-1.8.1.jar:$APP_HOME/lib/httpclient-4.5.13.jar:$APP_HOME/lib/commons-logging-1.2.jar:$APP_HOME/lib/commons-collections-3.2.2.jar:$APP_HOME/lib/joda-time-2.10.2.jar:$APP_HOME/lib/simpleclient_servlet_common-0.12.0.jar:$APP_HOME/lib/simpleclient_common-0.12.0.jar:$APP_HOME/lib/simpleclient-0.12.0.jar:$APP_HOME/lib/jetty-security-9.4.43.v20210629.jar:$APP_HOME/lib/jetty-util-ajax-9.4.43.v20210629.jar:$APP_HOME/lib/scalar-admin-1.2.0.jar:$APP_HOME/lib/azure-core-http-netty-1.11.9.jar:$APP_HOME/lib/reactor-netty-http-1.0.15.jar:$APP_HOME/lib/netty-codec-http2-4.1.73.Final.jar:$APP_HOME/lib/reactor-netty-core-1.0.15.jar:$APP_HOME/lib/netty-handler-proxy-4.1.73.Final.jar:$APP_HOME/lib/netty-reactive-streams-http-2.0.5.jar:$APP_HOME/lib/netty-codec-http-4.1.73.Final.jar:$APP_HOME/lib/netty-resolver-dns-native-macos-4.1.72.Final-osx-x86_64.jar:$APP_HOME/lib/netty-resolver-dns-classes-macos-4.1.72.Final.jar:$APP_HOME/lib/netty-resolver-dns-4.1.72.Final.jar:$APP_HOME/lib/netty-reactive-streams-2.0.5.jar:$APP_HOME/lib/netty-handler-4.1.73.Final.jar:$APP_HOME/lib/jnr-posix-3.0.44.jar:$APP_HOME/lib/jnr-ffi-2.1.7.jar:$APP_HOME/lib/micrometer-core-1.8.2.jar:$APP_HOME/lib/HdrHistogram-2.1.12.jar:$APP_HOME/lib/reactor-core-3.4.14.jar:$APP_HOME/lib/reactive-streams-1.0.3.jar:$APP_HOME/lib/jaxb-api-2.3.1.jar:$APP_HOME/lib/annotations-2.17.69.jar:$APP_HOME/lib/commons-pool2-2.8.1.jar:$APP_HOME/lib/proto-google-common-protos-2.0.1.jar:$APP_HOME/lib/protobuf-java-3.19.2.jar:$APP_HOME/lib/ojdbc8-19.8.0.0.jar:$APP_HOME/lib/ucp-19.8.0.0.jar:$APP_HOME/lib/oraclepki-19.8.0.0.jar:$APP_HOME/lib/osdt_core-19.8.0.0.jar:$APP_HOME/lib/osdt_cert-19.8.0.0.jar:$APP_HOME/lib/simplefan-19.8.0.0.jar:$APP_HOME/lib/ons-19.8.0.0.jar:$APP_HOME/lib/orai18n-19.8.0.0.jar:$APP_HOME/lib/xdb-19.8.0.0.jar:$APP_HOME/lib/xmlparserv2-19.8.0.0.jar:$APP_HOME/lib/simpleclient_tracer_otel-0.12.0.jar:$APP_HOME/lib/simpleclient_tracer_otel_agent-0.12.0.jar:$APP_HOME/lib/jetty-server-9.4.43.v20210629.jar:$APP_HOME/lib/jetty-http-9.4.43.v20210629.jar:$APP_HOME/lib/jetty-io-9.4.43.v20210629.jar:$APP_HOME/lib/jetty-util-9.4.43.v20210629.jar:$APP_HOME/lib/perfmark-api-0.25.0.jar:$APP_HOME/lib/netty-transport-native-epoll-4.1.73.Final-linux-x86_64.jar:$APP_HOME/lib/netty-transport-native-kqueue-4.1.73.Final-osx-x86_64.jar:$APP_HOME/lib/netty-transport-classes-epoll-4.1.73.Final.jar:$APP_HOME/lib/netty-transport-classes-kqueue-4.1.73.Final.jar:$APP_HOME/lib/netty-transport-native-unix-common-4.1.73.Final.jar:$APP_HOME/lib/netty-codec-socks-4.1.73.Final.jar:$APP_HOME/lib/netty-codec-dns-4.1.72.Final.jar:$APP_HOME/lib/netty-codec-4.1.73.Final.jar:$APP_HOME/lib/netty-transport-4.1.73.Final.jar:$APP_HOME/lib/netty-buffer-4.1.73.Final.jar:$APP_HOME/lib/jffi-1.2.16.jar:$APP_HOME/lib/jffi-1.2.16-native.jar:$APP_HOME/lib/asm-commons-5.0.3.jar:$APP_HOME/lib/asm-analysis-5.0.3.jar:$APP_HOME/lib/asm-util-5.0.3.jar:$APP_HOME/lib/asm-tree-5.0.3.jar:$APP_HOME/lib/asm-5.0.3.jar:$APP_HOME/lib/jnr-x86asm-1.0.2.jar:$APP_HOME/lib/jnr-constants-0.9.9.jar:$APP_HOME/lib/netty-tcnative-boringssl-static-2.0.47.Final.jar:$APP_HOME/lib/LatencyUtils-2.0.3.jar:$APP_HOME/lib/javax.activation-api-1.2.0.jar:$APP_HOME/lib/third-party-jackson-core-2.17.69.jar:$APP_HOME/lib/eventstream-1.0.1.jar:$APP_HOME/lib/httpcore-4.4.13.jar:$APP_HOME/lib/netty-resolver-4.1.73.Final.jar:$APP_HOME/lib/netty-common-4.1.73.Final.jar:$APP_HOME/lib/simpleclient_tracer_common-0.12.0.jar:$APP_HOME/lib/javax.servlet-api-3.1.0.jar:$APP_HOME/lib/annotations-4.1.1.4.jar:$APP_HOME/lib/animal-sniffer-annotations-1.19.jar:$APP_HOME/lib/grpc-context-1.46.0.jar:$APP_HOME/lib/netty-tcnative-classes-2.0.47.Final.jar:$APP_HOME/lib/woodstox-core-6.2.7.jar:$APP_HOME/lib/stax2-api-4.2.1.jar:$APP_HOME/lib/commons-codec-1.11.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and DEPLOY_TOOL_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $DEPLOY_TOOL_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        -classpath "$CLASSPATH" \
        com.scalar.ist.tools.DeployTool \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $DEPLOY_TOOL_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
